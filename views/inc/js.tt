[%
  BLOCK js_wrapper;
  # standard JS wrapper to execute code on page load
%]
  <script>
  "use strict";
  $(document).ready( () => {
[% content %]
    $('#navigation li:first-child a').tab('show')
  })
  </script>
[% END;


# l - length changing input control
# f - filtering input
# t - The table!
# i - Table information summary
# p - pagination control
# r - processing display element
#
# "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
# "<'row'<'col-sm-12'tr>>" +
# "<'row'<'col-sm-5'i><'col-sm-7'p>>",
#
# B - Buttons
# R - ColReorder
# S - Scroller
# P - SearchPanes

  BLOCK default_table_conf;
  # a JS variable named 'cols' must exist with the column configuration set up
  # see https://datatables.net/reference/option/columns for details 
  
%]
    const tableConfig = {
      dom: 'Bfrtipl',
      buttons: [
        {
          text: 'Downloads',
          className: 'disabled',
          enabled: false,
        },
        {
          extend: 'csv',
          text: 'CSV',
          extension: '.csv',
        },
        {
          extend: 'csv',
          text: 'TSV',
          fieldSeparator: '\t',
          extension: '.tsv',
        },
        {
          text: 'JSON',
          action: function ( e, dt, button, config ) {
            $.fn.dataTable.fileSave(
              new Blob( [ JSON.stringify( dt.buttons.exportData() ) ] ),
              'Export.json'
            );
          },
        },
      ],
      lengthMenu: [ [25, 50, -1], [25, 50, "All"] ],
      columns: cols,
    };
[%
  END;


  BLOCK dsv_wrapper;
  # surrounds a block of JS with the wrapper to retrieve and parse CSV or TSV data
  # args:
  #   data_file: '/path/to/file'        # path to file containing table data
  #   data_file_format: ('csv' | 'tsv') # appropriate file format
%]
    d3.text('[% data_file %]').then(function(lines) {
      const data = d3.[% data_file_format %]Parse(lines);
[%
    content;
%]
    })
[%
  END;


  BLOCK default_data_load;
  #
  # args:
  #   table_id: 'some_table_id'         # ID of the table
  #   data_file: '/path/to/file'        # path to file containing table data (optional)
  #   data_file_format: ('csv'|'tsv'|'json') # (optional) - data file format
  #
  #   data_js_variable:                 # (optional) - for JSON files, where the array of objects
  #                                     # to be tabulated is
  #
  #   custom_data_load_block:           # a block to be processed to produce / wrangle data.
                                        # Should include initialisation code to ensure that the
                                        # table can be populated.
    IF data_file_format && ( data_file_format == 'csv' || data_file_format == 'tsv' );

      WRAPPER dsv_wrapper;
%]
      tableConfig.data = data
      $('#[% table_id %]').DataTable(tableConfig);
[%
      END;
    ELSE;

      IF data_file_format && data_file_format == 'json' || data_file;
        # retrieve the data file by AJAX
        # data is expected to be an array of objects in JSON format
        # i.e. [ {...}, {...}, {...} ]
        # see https://datatables.net/manual/ajax for more details
        IF ! ajax_data_src;
          ajax_data_src = '';
        END;
%]
    tableConfig.ajax = {
      url: '[% data_file %]',
      dataSrc: "[% ajax_data_src %]",
    }
[%
      ELSIF data_js_variable;
        # data in a JS variable
%]
    tableConfig.data = [% data_js_variable %];
[%
      ELSE;
      # TODO: add in specific param for custom JS
        IF custom_data_load_block;
          custom_data_load_block;
        END;
      END;
%]
    $('#[% table_id %]').DataTable(tableConfig);
[%  END; # end if data_file_format && ...
  END;
%]