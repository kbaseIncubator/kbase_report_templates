[%
  # js_wrapper
  #
  # standard JS wrapper to execute code on page load and set the first navigation tab to active

  BLOCK js_wrapper;
%]
  <script>
  "use strict";
  $(document).ready( () => {
[% content %]
    $('#navigation li:first-child a').tab('show')
  })
  </script>
[% END; # end block



  # default_datatables_js
  #
  # block to insert the appropriate JS to initialise a single DataTables table
  #
  # template variables used:
  #   table_id: 'some_table_id'   # ID of the table

  #   cols:                       # specification for the column format in DataTables syntax
                                  # see https://datatables.net/reference/option/columns

  #   EITHER:
  #   data_array:                 # (optional) - template variable holding table data
                                  # should be an array of arrays or an array of objects
                                  # see https://datatables.net/manual/data/#Data-source-types

  #   OR:
  #   data_file: '/path/to/file'  # (optional) - path to file containing table data

  #   data_file_format: ('csv'|'tsv'|'json')
                                  # (optional) - data file format

  #   ajax_data_src:              # (optional) - for JSON files, where to look for the
                                  # data for tabulation.
                                  # data is expected to be an array of objects in JSON format
                                  # i.e. [ {...}, {...}, {...} ]
                                  # if the table data is not the top level array, `ajax_data_src`
                                  # can be used to specify the location
                                  # see https://datatables.net/manual/ajax for more details


  #   custom_data_load_block:     # (optional) a block to be processed to wrangle data and
                                  # use it to populate the table (e.g. via tableConfig.data or
                                  # tableConfig.ajax).


  BLOCK default_datatables_js;

    # the following code is a mixture of Template Toolkit syntax and JavaScript
    # WRAPPER js_wrapper surrounds the content with a 'script' tag and a JS function
    # that runs when the document is ready

    WRAPPER js_wrapper;

    # supply the column header names for the table %]
    const cols = [% cols %];

[%
      IF data_array;

      # add in the data to be used as the table contents
      # by default Template Toolkit (TT) outputs them in a JavaScript/Python-like syntax
      # so they can be written directly into the script
%]
    const dataSet = [% data_array %];
[%
      # record the name of the variable storing the table data
      data_js_variable = 'dataSet';

      END;

    # include a TT block that specifies a standard table config
    # this sets up all the table configuration but does not specify the data source
    # for the table
    PROCESS default_table_conf;

    # include a TT block to set the table contents
    # because the TT variable 'data_js_variable' is defined, the table content
    # will be set to the JS variable 'dataSet'
    PROCESS default_data_load;

    END; # end JS wrapper
  END; # end block



  # default_table_conf

  # a JS variable named 'cols' must already exist with the column configuration set up
  # see https://datatables.net/reference/option/columns for details on how to specify columns
  #
  # see 'default_data_load' for data loading and code to trigger the table rendering.
  #
  # any of these values can be overwritten by code that follows this block

  # 'dom' attribute -- sets up table layout
  #
  # l - length changing input control
  # f - filtering input
  # t - The table!
  # i - Table information summary
  # p - pagination control
  # r - processing display element
  #
  # B - Buttons
  # R - ColReorder
  # S - Scroller
  # P - SearchPanes
  #
  # example with bootstrap classes:
  # "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
  # "<'row'<'col-sm-12'tr>>" +
  # "<'row'<'col-sm-5'i><'col-sm-7'p>>",

  BLOCK default_table_conf;

%]
    let tableConfig = {
      dom: 'Bfrtipl',
      buttons: [
        {
          text: 'Downloads',
          className: 'disabled',
          enabled: false,
        },
        {
          extend: 'csv',
          text: 'CSV',
          extension: '.csv',
        },
        {
          extend: 'csv',
          text: 'TSV',
          fieldSeparator: '\t',
          extension: '.tsv',
        },
        {
          text: 'JSON',
          action: function ( e, dt, button, config ) {
            $.fn.dataTable.fileSave(
              new Blob( [ JSON.stringify( dt.buttons.exportData() ) ] ),
              'Export.json'
            );
          },
        },
      ],
      lengthMenu: [ [25, 50, 100], [25, 50, 100] ],
      columns: cols,
    };
[%
  END; # end block



  # dsv_wrapper
  #
  # surrounds a block of JS with a wrapper to retrieve and parse CSV or TSV data
  # the first row of the file is assumed to be the column names
  #
  # template variables used:
  #   data_file: '/path/to/file'        # path to file containing table data
  #   data_file_format: ('csv' | 'tsv') # appropriate file format
  #
  # 'data' is an array of objects from the parsed file
  # 'data.columns' contains the column headers in the order in which they appear in the file
  #
  # see https://github.com/d3/d3-dsv#dsvFormat for full details of the function

  BLOCK dsv_wrapper;

%]
    d3.text('[% data_file %]').then( lines => {
      const data = d3.[% data_file_format %]Parse(lines);
[%  content %]
    })
[%
  END; # end block



  # default_data_load
  #
  # template variables used:
  #   table_id: 'some_table_id'   # ID of the table
  #   data_file: '/path/to/file'  # path to file containing table data (optional)

  #   data_file_format: ('csv'|'tsv'|'json')
                                  # (optional) - data file format

  #   data_js_variable:           # (optional) - the JS variable holding table data
                                  # should be an array of arrays or an array of objects
                                  # see https://datatables.net/manual/data/#Data-source-types

  #   ajax_data_src:              # (optional) - for JSON files, where to look for the
                                  # data for tabulation.
                                  # data is expected to be an array of objects in JSON format
                                  # i.e. [ {...}, {...}, {...} ]
                                  # if the table data is not the top level array, `ajax_data_src`
                                  # can be used to specify the location
                                  # see https://datatables.net/manual/ajax for more details

  #   custom_data_load_block:     # (optional) a block to be processed to wrangle data and
                                  # use it to populate the table (e.g. via tableConfig.data or
                                  # tableConfig.ajax).

  BLOCK default_data_load;

    IF data_file_format && ( data_file_format == 'csv' || data_file_format == 'tsv' );

      WRAPPER dsv_wrapper;
%]
      tableConfig.data = data
      $('#[% table_id %]').DataTable(tableConfig);
[%
      END;

    ELSE;

      IF data_file_format && data_file_format == 'json' || data_file;
        #
        # retrieve the data file by AJAX
        # data is expected to be an array of objects in JSON format
        # i.e. [ {...}, {...}, {...} ]
        # see https://datatables.net/manual/ajax for more details
        #
        IF ! ajax_data_src;
          ajax_data_src = '';
        END;
%]
    tableConfig.ajax = {
      url: '[% data_file %]',
      dataSrc: "[% ajax_data_src %]",
    }
[%
      ELSIF data_js_variable;
        # data in a JS variable
%]
    tableConfig.data = [% data_js_variable %];
[%
      ELSE;
        IF custom_data_load_block;
          custom_data_load_block;
        END;
      END;
%]
    $('#[% table_id %]').DataTable(tableConfig);
[%
    END; # end if data_file_format && ...
  END; # end block
%]
